name: ✅ MCP Server CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: 🔁 CI Pipeline
    runs-on: ubuntu-latest
    env:
      API_KEY: ${{ secrets.API_KEY }}
    services:
      docker:
        image: docker:20.10.16
        options: --privileged  # Enables docker-in-docker if needed
        ports:
          - 8000:8000

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: 📦 Install Lint Dependencies
        run: |
          pip install black ruff

      - name: 🧹 Lint Code (Black & Ruff)
        run: |
          black --check .
          ruff check .

      - name: 📄 Create .env file for docker-compose
        run: |
          echo "VALID_API_KEYS=${{ env.API_KEY }},another-key" > .env

      - name: 🐳 Build Docker Image
        run: |
          docker build -f docker/Dockerfile -t mcp:ci .

      - name: 🚀 Run MCP Container
        run: |
          docker compose -f docker/docker-compose.yml -p mcp up -d
          echo "Sleeping for 10s to let MCP server boot..."
          sleep 10

      - name: 🧪 Test /health Endpoint
        run: |
          curl -s http://localhost:8000/health | grep '"status":"ok"'

      - name: 🧪 Test /tools/terraform_plan
        run: |
          curl -s -H "X-API-Key: $API_KEY" http://localhost:8000/tools/terraform_plan | grep '"success":true'

      - name: 🧪 Test /tools/ansible_ping
        run: |
          curl -s -H "X-API-Key: $API_KEY" http://localhost:8000/tools/ansible_ping | grep '"success":true'

      - name: 🧪 Test /tools/docker_build (dry run)
        run: |
          curl -s -H "X-API-Key: $API_KEY" "http://localhost:8000/tools/docker_build?path=examples/docker_sample&tag=mcp/test-image:ci" | grep '"success":true'

      - name: 🧪 Test /tools/k8s_apply (expect fail but valid)
        run: |
          curl -s -H "X-API-Key: $API_KEY" "http://localhost:8000/tools/k8s_apply?file=examples/k8s_sample/deployment.yaml" | grep '"success": false'

      - name: 🧹 Shut down MCP
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml -p mcp down
